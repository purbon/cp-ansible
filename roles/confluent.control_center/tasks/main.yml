- name: Copy geneated public.pem to host
  copy:
    src: "generated_token_keys/public.pem"
    dest: {{ mds_default_public_key }}
  when: rbac_enabled|bool
# Install Packages
- name: Install the Control Center Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{control_center_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Control Center Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{control_center_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Create Control Center Group
  group:
    name: "{{control_center.group}}"

- name: Create Control Center User
  user:
    name: "{{control_center.user}}"
    comment: "Control Center User"
    system: yes
    group: "{{control_center.group}}"

- import_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{control_center_truststore_storepass}}"
    truststore_path: "{{control_center_truststore_path}}"
    keystore_path: "{{control_center_keystore_path}}"
    keystore_storepass: "{{control_center_keystore_storepass}}"
    keystore_keypass: "{{control_center_keystore_keypass}}"
  when: control_center_ssl_enabled|bool or kafka_broker_listeners[control_center_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool

- name: Create Keytabs Directory
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{control_center.group}}"
    mode: '650'
    recurse: yes
  when: kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

- name: Copy in Keytab File
  copy:
    src: "{{control_center_kerberos_keytab_path}}"
    dest: "{{kerberos.keytab_dir}}/{{control_center_kerberos_keytab_path | basename}}"
    mode: '600'
    owner: "{{control_center.user}}"
    group: "{{control_center.group}}"
  when: kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'
  notify:
    - restart control center

- name: Create Control Center Config
  template:
    src: control-center.properties.j2
    dest: "{{control_center.config_file}}"
    mode: 0640
    owner: "{{control_center.user}}"
    group: "{{control_center.group}}"
  notify:
    - restart control center

- name: Create Logs Directory
  file:
    path: "{{control_center.appender_log_path}}"
    group: "{{control_center.group}}"
    owner: "{{control_center.user}}"
    mode: '764'
    recurse: yes

- name: Create Control Center log4j Config
  template:
    src: control-center_log4j.properties.j2
    dest: "{{control_center.log4j_file}}"
    mode: 0640
    owner: "{{control_center.user}}"
    group: "{{control_center.group}}"
  notify:
    - restart control center

- name: Create Service Override Directory
  file:
    path: "{{control_center.systemd_override | dirname}}"
    owner: "{{control_center.user}}"
    group: "{{control_center.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{control_center.systemd_override}}"
    mode: 0640
    owner: "{{control_center.user}}"
    group: "{{control_center.group}}"
  notify:
    - reload systemd
    - restart control center

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart control center
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Control Center Service
  systemd:
    name: "{{control_center_service_name}}"
    enabled: yes
    state: started
