# Control Center Configuration
confluent.controlcenter.rest.listeners={{control_center_http_protocol}}://0.0.0.0:{{control_center_port}}
{% if control_center_ssl_enabled|bool %}
confluent.controlcenter.rest.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.rest.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.rest.ssl.key.password={{control_center_keystore_keypass}}
{% if control_center_ssl_mutual_auth_enabled|bool %}
confluent.controlcenter.rest.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.rest.ssl.truststore.password={{control_center_truststore_storepass}}
{% endif %}
{% endif %}

{% set cfg = control_center.properties %}
{% for key, value in cfg.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Brokers
bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[control_center_kafka_listener_name]['port']}}{% endfor %}

confluent.controlcenter.streams.security.protocol={{kafka_broker_listeners[control_center_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
confluent.controlcenter.streams.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.streams.ssl.truststore.password={{control_center_truststore_storepass}}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
confluent.controlcenter.streams.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.streams.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.streams.ssl.key.password={{control_center_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
confluent.controlcenter.streams.sasl.mechanism=PLAIN
confluent.controlcenter.streams.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
   username="{{sasl_plain_users.control_center.principal}}" password="{{sasl_plain_users.control_center.password}}";
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
confluent.controlcenter.streams.sasl.mechanism=GSSAPI
confluent.controlcenter.streams.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
confluent.controlcenter.streams.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
   useKeyTab=true \
   storeKey=true \
   keyTab="{{kerberos.keytab_dir}}/{{control_center_kerberos_keytab_path | basename}}" \
   principal="{{control_center_kerberos_principal}}";
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
confluent.controlcenter.streams.sasl.mechanism=SCRAM-SHA-256
confluent.controlcenter.streams.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
   username="{{sasl_scram_users.control_center.principal}}" password="{{sasl_scram_users.control_center.password}}";
{% endif %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
confluent.controlcenter.schema.registry.url={% for host in groups['schema_registry'] %}{% if loop.index > 1%},{% endif %}{{ schema_registry_http_protocol }}://{{ host }}:{{ schema_registry_listener_port }}{% endfor %}

{% if schema_registry_ssl_enabled|bool %}
confluent.controlcenter.schema.registry.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.schema.registry.ssl.truststore.password={{control_center_truststore_storepass}}
{% if schema_registry_ssl_mutual_auth_enabled|bool %}
confluent.controlcenter.schema.registry.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.schema.registry.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.schema.registry.ssl.key.password={{control_center_keystore_keypass}}
{% endif %}
{% endif %}
{% endif %}

{% if rbac_enabled|bool %}
############################# Control Center RBAC Settings #############################
# Enable RBAC authorization in Control Center by providing a comma-separated list of Metadata Service (MDS) URLs (http://localhost:8090)
confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}http://{{ host }}:8091{% endfor %}
confluent.metadata.basic.auth.user.info=hermes:hermes
confluent.controlcenter.rest.authentication.method=BEARER
public.key.path={{ mds_default_public_key }}
{% endif %}

{% set connect_servers = groups.get('kafka_connect', []) %}
{% if connect_servers %}
# Kafka Connect Configuration
confluent.controlcenter.connect.default.cluster={% for host in groups['kafka_connect'] %}{% if loop.index > 1%},{% endif %}{{ kafka_connect_http_protocol }}://{{ host }}:{{ kafka_connect_rest_port }}{% endfor %}

{% endif %}

{% set ksql_servers = groups.get('ksql', []) %}
{% if ksql_servers and cfg.get('confluent.controlcenter.ksql.enable', 'false').lower() == 'true' %}
# KSQL Configuration
confluent.controlcenter.ksql.url={{ ksql_http_protocol }}://{{ ksql_servers[0] }}:{{ ksql_listener_port }}

{% endif %}
