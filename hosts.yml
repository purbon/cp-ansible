all:
  vars:
    ansible_connection: ssh
    ansible_user: ubuntu
    ansible_become: true

    #### SASL Authentication Configuration ####
    ## By default there will be no SASL Authentication
    ## For SASL/PLAIN uncomment this line:
    sasl_protocol: plain
    ## For SASL/GSSAPI uncomment this line and see Kerberos Configuration properties below
    # sasl_protocol: kerberos

    #### Kerberos Configuration ####
    ## Applicable when sasl_protocol is kerberos
    # kerberos_kafka_broker_primary: <Name of the primary set on the kafka brokers' principal eg. kafka>
    ## REQUIRED: Under each host set keytab file path and principal name, see below
    # kerberos_configure: <Boolean for ansible to install kerberos packages and configure this file: /etc/krb5.conf, defaults to true>
    # kerberos:
    #   realm: <KDC server realm eg. confluent.example.com>
    #   kdc_hostname: <hostname of machine with KDC running eg. ip-172-31-45-82.us-east-2.compute.internal>
    #   admin_hostname: <hostname of machine with KDC running eg. ip-172-31-45-82.us-east-2.compute.internal>

    #### TLS Configuration ####
    ## By default, data will NOT be encrypted. To turn on TLS encryption, uncomment this line
    ssl_enabled: true
    ## By default, the components will be configured with One-Way TLS, to turn on TLS mutual auth, uncomment this line:
    # ssl_mutual_auth_enabled: true
    ## By default, the certs for this configuration will be self signed, to deploy custom certificates there are two options.
    ## Option 1: Custom Certs
    ## You will need to provide the path to the Certificate Authority Cert used to sign each hosts' certs
    ## As well as the signed certificate path and the key for that certificate for each host.
    ## These will need to be set for the correct host
    # ssl_custom_certs: true
    # ssl_ca_cert_filepath: "/tmp/certs/ca.crt"
    # ssl_signed_cert_filepath: "/tmp/certs/{{inventory_hostname}}-signed.crt"
    # ssl_key_filepath: "/tmp/certs/{{inventory_hostname}}-key.pem"
    ## Option 2: Custom Keystores and Truststores
    ## CP-Ansible can move keystores/truststores to their corresponding hosts and configure the components to use them. Set These vars
    # provided_keystore_and_truststore: true
    # ssl_keystore_filepath: "/tmp/certs/{{inventory_hostname}}-keystore.jks"
    # ssl_keystore_key_password: mystorepassword
    # ssl_keystore_store_password: mystorepassword
    # ssl_truststore_filepath: "/tmp/certs/truststore.jks"
    # ssl_truststore_password: truststorepass

    #### Monitoring Configuration ####
    ## Jolokia is enabled by default. The Jolokia jar gets pulled from the internet and enabled on all the components
    ## To disable, uncomment this line:
    jolokia_enabled: false
    ## JMX Exporter is disabled by default. When enabled, JMX Exporter jar will be pulled from the Internet and enabled on the broker *only*.
    ## To enable, uncomment this line:
    jmxexporter_enabled: false

    ## To set custom properties for each service
    ## Find property options in the Confluent Documentation
    # zookeeper:
    #   properties:
    #     initLimit: 6
    #     syncLimit: 3
    kafka_broker:
       properties:
         num.io.threads: 15
         ssl.endpoint.identification.algorithm: ""
         allow.everyone.if.no.acl.found: false
         super.users: User:kafka
         authorizer.class.name: io.confluent.kafka.security.ldap.authorizer.LdapAuthorizer
         ldap.java.naming.provider.url: ldap://ec2-63-35-214-7.eu-west-1.compute.amazonaws.com:389/DC=CONFLUENT,DC=IO
         ldap.refresh.interval.ms: 10000
         ldap.java.naming.security.authentication: SIMPLE
         ldap.java.naming.security.principal: cn=admin,dc=confluent,dc=io
         ldap.java.naming.security.credentials: admin
         ldap.group.search.base: ou=groups
         ldap.group.object.class: posixGroup
         ldap.group.search.scope: 2
         # Name of the attribute from which group name used in ACLs is obtained
         ldap.group.name.attribute: cn
         # Regex pattern to obtain group name used in ACLs from the attribute `ldap.authorizer.group.name.attribute`
         ldap.group.name.attribute.pattern:
         # Name of the attribute from which group members (user principals) are obtained
         ldap.group.member.attribute: memberUid
         # Regex pattern to obtain user principal from group member attribute
         ldap.group.member.attribute.pattern: cn=(.*),ou=users,dc=confluent,dc=io
    # schema_registry:
    #   properties:
    #     key: val
    # control_center:
    #   properties:
    #     key: val
    # kafka_connect:
    #   properties:
    #     key: val
    # kafka_rest:
    #   properties:
    #     key: val
    # ksql:
    #   properties:
    #     key: val

zookeeper:
  hosts:
    ip-172-31-25-251.eu-west-1.compute.internal:
      ## By default the first host will get zookeeper id=1, second gets id=2. Set zookeeper_id to customize
      # zookeeper_id: 2

      ## For kerberos sasl protocol, EACH host will need these two variables:
      # zookeeper_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/zookeeper-ip-172-31-34-246.us-east-2.compute.internal.keytab>
      # zookeeper_kerberos_principal: <The principal configured in kdc server, eg. zookeeper/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
    ip-172-31-39-166.eu-west-1.compute.internal:
      # zookeeper_id: 3
    ip-172-31-14-146.eu-west-1.compute.internal:
      # zookeeper_id: 1
kafka_broker:
  hosts:
    ip-172-31-17-15.eu-west-1.compute.internal:
      ## By default the first host will get broker id=1, second gets id=2. Set broker_id to customize
      broker_id: 1
      ## For kerberos sasl protocol, EACH host will need these two variables:
      # kafka_broker_kerberos_keytab_path: <The path on ansible host to keytab file, eg. /tmp/keytabs/ip-172-31-34-246.us-east-2.compute.internal>
      # kafka_broker_kerberos_principal: <The principal configured in kdc server, eg. kafka/ip-172-31-34-246.us-east-2.compute.internal@REALM.EXAMPLE.COM>
    ip-172-31-39-106.eu-west-1.compute.internal:
      broker_id: 2
    ip-172-31-9-204.eu-west-1.compute.internal:
      broker_id: 3
control_center:
  hosts:
    ec2-63-35-214-7.eu-west-1.compute.amazonaws.com:
      control_center_ssl_enabled: true
ldap_server:
  hosts:
    ec2-63-35-214-7.eu-west-1.compute.amazonaws.com:
      openldap_admin_password: 'admin'
      openldap_admin_user: 'admin'
      openldap_base: 'dc=confluent,dc=io'
      openldap_organizationalunits:  #defines OU's to populate
        - People
        - Groups
      openldap_phpldapadmin_hide_warnings: 'true'
      openldap_populate: false  #defines if openldap DB should be populated with openldap_organizationalunits, openldap_posixgroups and openldap_users
      openldap_posixgroups:  #defines groups to create within OU's
        - dn: cn=Kafka Developers,ou=groups,confluent.io
          objectClass: top
          objectClass: posixGroup
          name: Kafka Developers
          ou: Groups
          gidNum: 5000
      openldap_server_host: '0.0.0.0'  #defines host for phpLDAPadmin
      openldap_users:
        - dn: cn=alice,ou=users,confluent.io
          objectClass: inetOrgPerson
          objectClass: posixAccount
          objectClass: shadowAccount
          uid: alice
          LastName: LookingGlass
          FirstName: Alice
          cn: alice
          ou: People
          displayName: Alice LookingGlass
          uidNum: 10000
          gidNum: 5000
          password: alice-secret
          gecos: alice
          loginShell: /bin/bash
          homeDirectory: /home/alice
        - dn: cn=barnie,ou=users,confluent.io
          objectClass: inetOrgPerson
          objectClass: posixAccount
          objectClass: shadowAccount
          uid: barnie
          LastName: Rubble
          FirstName: Barnie
          cn: barnie
          ou: People
          displayName: Barnie Rubble
          uidNum: 10001
          gidNum: 5000
          password: barnie-secret
          gecos: barnie
          loginShell: /bin/bash
          homeDirectory: /home/barnie
      pri_domain_name: 'confluent.io'
